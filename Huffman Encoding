/*Given An array of Alphabets and their frequency. Your task is to print all the given alphabets Huffman Encoding.
Note: If two elements have same frequency, then the element which if at first will be taken on left of Binary Tree and other one to right.

Input:
First line consists of test cases T. First line of every test case consists of string of alphabets and second line consists of its frequencies.

Output:
Print the HuffmanCodes in single line, with n spaces of each alphabet's HuffmanCodes respectively. In PreOrder form of Binary Tree.

Constraints:
1<=T<=100
1<=|String length|<=26

Example:
Input:
1
abcdef
5 9 12 13 16 45
Output:
0 100 101 1100 1101 111 

Explanation:
For the above test case.
HuffmanCodes will be
f: 0
c: 100
d: 101
a: 1100
b: 1101
e: 111*/


#include<iostream>
#include<bits/stdc++.h>
using namespace std;
class Node
{
    public:
    char data;
    int freq;
    Node*left;
    Node*right;
    
    Node(char data, int freq)
    {
       this->data=data;
       this->freq=freq;
       this->left=NULL;
       this->right=NULL;
    }
};
class Compare { 
public: 
    bool operator()(Node* a,Node* b) 
    { 
        // Defining priority on 
        // the basis of frequency 
        return a->freq > b->freq; 
    } 
};
//do preorder traversal
void copy(Node*node,vector<int>&v)
{
    if(node==NULL)
    {
        return;
    }
    if(node->data!='#' && node->left==NULL && node->right==NULL)
    {
        for(auto l:v)
        {
            cout<<l;
        }
        cout<<" ";
        return;
    }
    v.push_back(0);
    copy(node->left,v);
    v.pop_back();
    
    v.push_back(1);
    copy(node->right,v);
    v.pop_back();
}

Node*generate(priority_queue<Node*,vector<Node*>,Compare>pq)
{
    while(pq.size()!=1)
    {
        Node* left_value=pq.top();
        pq.pop();
        Node*right_value=pq.top();
        pq.pop();
        int sum=left_value->freq+right_value->freq;
        Node*sum_node=new Node('#',sum);
        sum_node->left=left_value;
        sum_node->right=right_value;
        pq.push(sum_node);
    }
    return pq.top();
}
int main()
 {
	//code
	int i,j;
	int t;
	cin>>t;
	for(i=0;i<t;i++)
	{
	    string str;
	    cin>>str;
	    int l=str.size();
	    priority_queue<Node*,vector<Node*>,Compare>pq; 
	    for(j=0;j<l;j++)
	    {
	        int a;
	        cin>>a;
	        Node*node=new Node(str[j],a);
	        pq.push(node);
	    }
	    Node*top_node=generate(pq);
	    vector<int>v;
	    copy(top_node,v);
	    cout<<"\n";
	}
	
	return 0;
}
