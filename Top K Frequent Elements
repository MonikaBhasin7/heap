/*https://leetcode.com/problems/top-k-frequent-elements/
Given a non-empty array of integers, return the k most frequent elements.

Example 1:

Input: nums = [1,1,1,2,2,3], k = 2
Output: [1,2]
Example 2:

Input: nums = [1], k = 1
Output: [1]
Note:

You may assume k is always valid, 1 ≤ k ≤ number of unique elements.
Your algorithm's time complexity must be better than O(n log n), where n is the array's size.
It's guaranteed that the answer is unique, in other words the set of the top k frequent elements is unique.
You can return the answer in any order.*/

https://leetcode.com/problems/top-k-frequent-elements/
class Solution {
  typedef pair<int,int>p;
public:
    vector<int> topKFrequent(vector<int>& nums, int k) {
      int i,j;
      
      unordered_map<int,int>mapy;
      for(auto f:nums)
      {
        mapy[f]=mapy[f]+1;
      }
      
      priority_queue<p,vector<p>,greater<p>>pq;
      for(auto f:mapy)
      {
        if(pq.size()<k)
        {
          pq.push({f.second,f.first});
        }
        else if(pq.size()==k && pq.top().first<f.second)
        {
          pq.pop();
          pq.push({f.second,f.first});
        }
        
      }
      
      vector<int>v;
      while(pq.size()!=0)
      {
        v.push_back(pq.top().second);
        pq.pop();
      }
      return v;
      i=0;
      j=v.size()-1;
      while(i<=j)
      {
        swap(v[i],v[j]);
        i=i+1;
        j=j-1;
      }
      return v;
     
    
        
    }
};
