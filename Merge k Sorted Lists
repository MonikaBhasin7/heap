/*https://leetcode.com/problems/merge-k-sorted-lists/

Merge k sorted linked lists and return it as one sorted list. Analyze and describe its complexity.

Example:

Input:
[
  1->4->5,
  1->3->4,
  2->6
]
Output: 1->1->2->3->4->4->5->6

*/

/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
typedef pair<int,ListNode*> p;
class Solution {
public:
    ListNode* mergeKLists(vector<ListNode*>& lists) {
      int i,j;
      if(lists.empty())
      {
        return nullptr;
      }
      int n=lists.size();
      
      priority_queue<p,vector<p>,greater<p>>pq;
      for(i=0;i<n;i++)
      {
        if(lists[i])
        {
          pq.push({lists[i]->val,lists[i]});
        }
      }
      
      if(pq.empty())
      {
        return NULL;
      }
      ListNode*head=NULL;
      ListNode*prev=NULL;
      while(pq.size()!=0)
      {
        p top=pq.top();
        pq.pop();
        
        int data=top.first;
        ListNode* node=top.second;
      
        ListNode*newnode=new ListNode(data);
        if(head==NULL)
        {
          head=newnode;
          prev=newnode;
        }
        else
        {
          prev->next=newnode;
          prev=newnode;
        }
        
        
        if(node->next!=NULL)
        {
          pq.push({node->next->val,node->next});
        }
      }
        
      return head;
    }
};
