/*https://practice.geeksforgeeks.org/problems/find-smallest-range-containing-elements-from-k-lists/1

Given K sorted lists of integers of size N each, find the smallest range that includes at least one element from each of the K lists. If more than one such range's are found, print the first such range found.

Input:
The first line of the input contains a single integer T denoting the number of test cases. The T test cases follow:
First line of each test case contains 2 space separated integers N and K. Then K lines follow. Each of the next ith (1 <= i <= K) line contain N space separated integers present in the ith list. 

Output:
For each test case output in a single line with two space-separated integers denoting the required range.

Your Task : Complete the function findSmallestRange() that receives array , array size n and k as parameters and returns the output range.

Expected Time Complexity : O(n * k *log k)
Expected Auxilliary Space  : O(k)

Constraints:
1 <= T <= 50
1 <= K,N <= 500

Example:
Input:
2
5 3
1 3 5 7 9
0 2 4 6 8
2 3 5 7 11
4 3
1 2 3 4
5 6 7 8
9 10 11 12

Output:
1 2
4 9

Explanation:
Testcase1: K = 3
A:[1 3 5 7 9]
B:[0 2 4 6 8]
C:[2 3 5 7 11]
Smallest range is formed by number 1 present in first list and 2 is present in both 2nd and 3rd list.*/




#include<iostream>
#include<limits.h>
using namespace std;
#define N 1000

void findSmallestRange(int arr[][N], int n, int k);

// Driver program to test above functions
int main()
{
    int t;
    cin>>t;
    while(t--)
    {
        int n, k;
        cin>>n>>k;
        int arr[N][N];
        for(int i=0; i<k; i++)
            for(int j=0; j<n; j++)
                cin>>arr[i][j];
	    findSmallestRange(arr, n, k);
    }   
	return 0;
}

// } Driver Code Ends
// you are required to complete this function 
// function should print the required range
void findSmallestRange(int a[][N], int n, int k)
{
      //code here
      int i,j;
      
      int ptr[k];
      int minel,maxel;
      for(i=0;i<k;i++)
      {
          ptr[i]=0;
      }
      int min_dif=INT_MAX;
      int flag=0;
      while(1)
      {
          int min_index=-1;
          int min=INT_MAX;
          int max=INT_MIN;
          for(i=0;i<k;i++)
          {
            if(ptr[i]>=n)
            {
                flag=1;
                break;
            }
            if(ptr[i]<n && a[i][ptr[i]]<min)
            {
                min=a[i][ptr[i]];
                min_index=i;
            }
            if(ptr[i]<n && a[i][ptr[i]]>max)
            {
                max=a[i][ptr[i]];
            }
          }
          if(flag==1)
          {
              break;
          }
          ptr[min_index]=ptr[min_index]+1;
          
          if ((max - min) < min_dif) { 
            minel = min; 
            maxel = max; 
            min_dif = max - min; 
        } 
      }
      cout<<minel<<" "<<maxel<<"\n";
}
